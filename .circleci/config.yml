# .circleci/config.yml

version: 2.1

jobs:
  # This build job just tests that the binary can build. If your project is a
  # library, not a binary, you don't need this build job. In other words, omit
  # this job if you don't have a func main() in your project.
  build:
    docker:
      - image: circleci/golang:1.15.8
    working_directory: ~/modern-apps
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "distributed_apps/http_json_rest/go.sum" }}
      - run:
          name: Install Dependencies
          # command: go get ./...
          command: go mod download          
      - run:
          name: "Building Client"
          command: |
            cd distributed_apps/http_json_rest
            CGO_ENABLED=0 go build -a -o bin/client_main ./client/client_main.go          
      - run:
          name: "Building Server"
          command: |
            cd distributed_apps/http_json_rest
            CGO_ENABLED=0 go build -a -o bin/server_main ./client/server_main.go   
      - save_cache:
          key: go-mod-v4-{{ checksum "distributed_apps/http_json_rest/go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            cd distributed_apps/http_json_rest
            go test -v
  lint:
    docker:
      - image: golangci/golangci-lint:v1.37-alpine
    working_directory: /go/src/modern-apps      
    steps:
      - checkout
      - run: golangci-lint run
  test:
    docker:
      # We use golang:1.16 instead of golang:1.16-alpine because we want to run
      # tests with the race detector enabled. The race detector requires glibc,
      # which is only present in the Debian-based containers.
      - image: circleci/golang:1.16-alpine
    working_directory: /go/src/modern-apps
    steps:
      - checkout
      - run: go test -v -race ./...

workflows:
  build_lint_test:
    jobs:
      - build
      - lint
      - test